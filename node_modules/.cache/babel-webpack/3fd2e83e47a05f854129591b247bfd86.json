{"ast":null,"code":"import _asyncToGenerator from \"/home/neve/Documentos/projetos/tcc/poket-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"src/app/shared/services/alerts-sweet.service\";\nimport * as i3 from \"src/app/shared/services/alert-modal.service\";\nexport class FinancialPlanningService {\n  constructor(angFireDB, alertSweetService, alertService) {\n    this.angFireDB = angFireDB;\n    this.alertSweetService = alertSweetService;\n    this.alertService = alertService;\n  } // Cria planejamento financeiro\n\n\n  createFinancialPlanning(fp, uid) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).add({\n      nomePF: fp.nomePF,\n      tipoPF: fp.tipoPF,\n      dataInicial: fp.dataInicial,\n      dataFinal: fp.dataFinal,\n      valorAtual: fp.valorAtual,\n      valorObjetivado: fp.valorObjetivado\n    }).then(res => {\n      // atualizar a conta incrementando a renda\n      let subWallet = parseInt(fp.contaValor) - parseInt(fp.valorAtual);\n      this.angFireDB.collection(\"contas\").doc(uid).collection(uid).doc(fp.idConta).update({\n        valor: subWallet\n      });\n      this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(res.id).collection(res.id).add({\n        idPF: res.id,\n        valorHistoricoPF: fp.valorAtual,\n        idConta: fp.idConta,\n        conta: fp.conta,\n        dataHistorico: fp.dataInicial\n      });\n    }).then(() => {\n      this.alertSweetService.showSweetAlertSuccess(\"Planejamento salvo com sucesso\");\n    }).catch(error => {\n      console.error(error);\n    });\n  } // Cria mais valores planejamento financeiro\n\n\n  AddMoreFinancialPlanning(fp, uid, idFp, oldValueFp) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFp).collection(idFp).add({\n      conta: fp.conta,\n      dataHistorico: fp\n    }).then(() => {\n      console.log(fp);\n      console.log(idFp, oldValueFp);\n      let subWallet = parseInt(fp.contaValor) - parseInt(fp.valorHistoricoPF);\n      let sumFP = fp.valorHistoricoPF + oldValueFp;\n      this.angFireDB.collection(\"contas\").doc(uid).collection(uid).doc(fp.idConta).update({\n        valor: subWallet\n      }).then(() => console.log(\"Conta atualizada\"));\n      return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFp).update({\n        valorAtual: sumFP\n      }).then(() => {\n        this.alertSweetService.showSweetAlertSuccess(\"Histórico salvo com sucesso\");\n      }).catch(error => {\n        console.error(error);\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  } //Atualiza dados de um documento\n\n\n  updateFinancialPlanning(fp, uid, idFp) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFp).update({\n      nomePF: fp.nomePF,\n      tipoPF: fp.tipoPF,\n      valorObjetivado: fp.valorObjetivado,\n      dataInicial: fp.dataInicial,\n      dataFinal: fp.dataFinal\n    }).then(() => {\n      this.alertSweetService.showSweetAlertSuccess(\"Planejamento alterado com sucesso\");\n    }).catch(error => {\n      console.error(error);\n    });\n  } // Deleta um documento de uma coleção\n\n\n  deleteFinancialPlanning(uid, idFP) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFP).delete().then(() => {\n      this.alertSweetService.showSweetAlertSuccess(\"Planejamento excluído com sucesso\");\n    }).catch(error => {\n      console.error(error);\n    });\n  } // Deleta um documento de uma coleção\n\n\n  deleteHistoryFpAfterWallet(uid, idFP, id) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFP).collection(idFP).doc(id).delete().then(() => {\n      console.log(\"Histórico apagado com sucesso\");\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  updateWalletBeforedeletePlan(uid, idWallet, walletOld, accountAmount) {\n    let sumFP = parseInt(walletOld) + accountAmount;\n    this.angFireDB.collection(\"contas\").doc(uid).collection(uid).doc(idWallet).update({\n      valor: sumFP\n    }).then(() => {// this.alertSweetService.showSweetAlertSuccess(\"Dado excluído com sucesso\");\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n  deleteHistoryFpBeforePlan(uid, idFP, id) {\n    this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFP).collection(idFP).doc(id).delete();\n  } // Deleta um documento de uma coleção\n\n\n  deleteHistoryFinancialPlanning(uid, idFP, idWallet, id, idWalletOld, accountAmount, totalValuePF) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFP).collection(idFP).doc(id).delete(); // atualizar a conta incrementando a renda\n\n        let sumFP = parseInt(idWalletOld) + accountAmount;\n        let sub = totalValuePF - accountAmount;\n\n        _this.angFireDB.collection(\"contas\").doc(uid).collection(uid).doc(idWallet).update({\n          valor: sumFP\n        }).then(() => {\n          _this.alertSweetService.showSweetAlertSuccess(\"Dado excluído com sucesso\");\n        }).catch(error => {\n          console.error(error);\n        });\n\n        try {\n          yield _this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFP).update({\n            valorAtual: sub\n          });\n\n          _this.alertSweetService.showSweetAlertSuccess(\"Histórico salvo com sucesso\");\n        } catch (error_1) {\n          console.error(error_1);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    })();\n  } // Listar todos os documetos de planejamento de uma coleção\n\n\n  getFinancialPlanningList(uid) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).snapshotChanges();\n  } // Listar todos os documetos do historico de um planejamento de uma coleção\n\n\n  getHistoryFinancialPlanningList(uid, idFp) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFp).collection(idFp).snapshotChanges();\n  } // Lista dados de um documento\n\n\n  getFinancialPlanningDoc(uid, idFp) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).doc(idFp).valueChanges();\n  }\n\n}\n\nFinancialPlanningService.ɵfac = function FinancialPlanningService_Factory(t) {\n  return new (t || FinancialPlanningService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AlertsSweetService), i0.ɵɵinject(i3.AlertModalService));\n};\n\nFinancialPlanningService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FinancialPlanningService,\n  factory: FinancialPlanningService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/neve/Documentos/projetos/tcc/poket-web/src/app/finances/services/financial-planning.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AlertModalService } from 'src/app/shared/services/alert-modal.service';\nimport { AlertsSweetService } from 'src/app/shared/services/alerts-sweet.service';\nimport { FinancialPlanning } from '../modal/financial-planning';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FinancialPlanningService {\n\n  constructor(\n    private angFireDB: AngularFirestore,\n    private alertSweetService: AlertsSweetService,\n    private alertService: AlertModalService,\n  ) { }\n\n\n  // Cria planejamento financeiro\n  createFinancialPlanning(fp: FinancialPlanning, uid: any) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid).add({\n      nomePF: fp.nomePF,\n      tipoPF: fp.tipoPF,\n      dataInicial: fp.dataInicial,\n      dataFinal: fp.dataFinal,\n      valorAtual: fp.valorAtual,\n      valorObjetivado: fp.valorObjetivado\n    })\n      .then((res) => {\n\n        // atualizar a conta incrementando a renda\n        let subWallet = parseInt(fp.contaValor) - parseInt(fp.valorAtual)\n        this.angFireDB\n          .collection(\"contas\").doc(uid).collection(uid)\n          .doc(fp.idConta)\n          .update({\n            valor: subWallet\n          })\n\n        this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n          .doc(res.id).collection(res.id).add({\n            idPF: res.id,\n            valorHistoricoPF: fp.valorAtual,\n            idConta: fp.idConta,\n            conta: fp.conta,\n            dataHistorico: fp.dataInicial\n          })\n\n      }).then(() => {\n        this.alertSweetService.showSweetAlertSuccess(\"Planejamento salvo com sucesso\")\n\n      }).catch((error) => {\n        console.error(error)\n      })\n\n\n  }\n\n  // Cria mais valores planejamento financeiro\n  AddMoreFinancialPlanning(fp: any, uid: any, idFp: any, oldValueFp: any) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n      .doc(idFp).collection(idFp).add({\n        conta: fp.conta,\n        dataHistorico: fp\n      }\n        )\n      .then(() => {\n\n        console.log(fp)\n        console.log(idFp, oldValueFp)\n\n        let subWallet = parseInt(fp.contaValor) - parseInt(fp.valorHistoricoPF)\n        let sumFP = fp.valorHistoricoPF + oldValueFp\n\n        this.angFireDB\n          .collection(\"contas\").doc(uid).collection(uid)\n          .doc(fp.idConta)\n          .update({\n            valor: subWallet\n          }).then(() => console.log(\"Conta atualizada\"))\n\n        return this.angFireDB\n          .collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n          .doc(idFp)\n          .update({\n            valorAtual: sumFP\n          }).then(() => {\n            this.alertSweetService.showSweetAlertSuccess(\"Histórico salvo com sucesso\")\n\n          }).catch((error) => {\n            console.error(error)\n          })\n\n      }).catch((error) => {\n        console.error(error)\n      })\n  }\n\n\n  //Atualiza dados de um documento\n  updateFinancialPlanning(fp: FinancialPlanning, uid: any, idFp: any) {\n    return this.angFireDB\n      .collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n      .doc(idFp)\n      .update({\n\n        nomePF: fp.nomePF,\n        tipoPF: fp.tipoPF,\n        valorObjetivado: fp.valorObjetivado,\n        dataInicial: fp.dataInicial,\n        dataFinal: fp.dataFinal\n\n      }).then(() => {\n        this.alertSweetService.showSweetAlertSuccess(\"Planejamento alterado com sucesso\")\n\n      }).catch((error) => {\n        console.error(error)\n      })\n\n  }\n\n\n  // Deleta um documento de uma coleção\n  deleteFinancialPlanning(uid: any, idFP: any) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid)\n      .collection(uid)\n      .doc(idFP)\n      .delete()\n      .then(() => {\n        this.alertSweetService.showSweetAlertSuccess(\"Planejamento excluído com sucesso\")\n\n      }).catch((error) => {\n        console.error(error)\n      })\n  }\n\n  // Deleta um documento de uma coleção\n  deleteHistoryFpAfterWallet(uid: any, idFP: any, id: any) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n      .doc(idFP).collection(idFP).doc(id)\n      .delete()\n      .then(() => {\n        console.log(\"Histórico apagado com sucesso\")\n\n\n      }).catch((err) => {\n        console.error(err)\n      })\n  }\n\n  updateWalletBeforedeletePlan(uid: any, idWallet: any, walletOld: any, accountAmount: any,) {\n    let sumFP = parseInt(walletOld) + accountAmount;\n    this.angFireDB\n      .collection(\"contas\").doc(uid).collection(uid)\n      .doc(idWallet)\n      .update({\n        valor: sumFP\n      }).then(() => {\n        // this.alertSweetService.showSweetAlertSuccess(\"Dado excluído com sucesso\");\n\n      }).catch((error) => {\n        console.error(error);\n      });\n  }\n\n  deleteHistoryFpBeforePlan(uid: any, idFP: any, id: any) {\n    this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n      .doc(idFP).collection(idFP).doc(id)\n      .delete();\n  }\n\n\n  // Deleta um documento de uma coleção\n  async deleteHistoryFinancialPlanning(uid: any, idFP: any, idWallet: any, id: any, idWalletOld: any, accountAmount: any, totalValuePF: any) {\n    try {\n      await this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n        .doc(idFP).collection(idFP).doc(id)\n        .delete();\n      // atualizar a conta incrementando a renda\n      let sumFP = parseInt(idWalletOld) + accountAmount;\n      let sub = totalValuePF - accountAmount;\n\n      this.angFireDB\n        .collection(\"contas\").doc(uid).collection(uid)\n        .doc(idWallet)\n        .update({\n          valor: sumFP\n        }).then(() => {\n          this.alertSweetService.showSweetAlertSuccess(\"Dado excluído com sucesso\");\n\n        }).catch((error) => {\n          console.error(error);\n        });\n      try {\n        await this.angFireDB\n          .collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n          .doc(idFP)\n          .update({\n            valorAtual: sub\n          });\n        this.alertSweetService.showSweetAlertSuccess(\"Histórico salvo com sucesso\");\n      } catch (error_1) {\n        console.error(error_1);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  // Listar todos os documetos de planejamento de uma coleção\n  getFinancialPlanningList(uid: any) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid)\n      .collection(uid)\n      .snapshotChanges();\n  }\n\n  // Listar todos os documetos do historico de um planejamento de uma coleção\n  getHistoryFinancialPlanningList(uid: any, idFp: any) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid).collection(uid)\n      .doc(idFp).collection(idFp)\n      .snapshotChanges();\n  }\n\n  // Lista dados de um documento\n  getFinancialPlanningDoc(uid: any, idFp: any) {\n    return this.angFireDB.collection(\"planejamentoFinanceiro\").doc(uid)\n      .collection(uid).doc(idFp)\n      .valueChanges()\n  }\n\n\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}