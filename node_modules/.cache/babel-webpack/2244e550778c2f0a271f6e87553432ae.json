{"ast":null,"code":"import _asyncToGenerator from \"/home/neve/Documentos/projetos/tcc/poket-web/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/fire/auth\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"src/app/shared/services/alert-modal.service\";\nexport class AuthService {\n  constructor(angFireStore, angFireAuth, router, ngZone, alertService) {\n    this.angFireStore = angFireStore;\n    this.angFireAuth = angFireAuth;\n    this.router = router;\n    this.ngZone = ngZone;\n    this.alertService = alertService;\n    this.angFireAuth.authState.subscribe(user => {\n      if (user) {\n        this.userData = user;\n        localStorage.setItem('user', JSON.stringify(this.userData));\n        JSON.parse(localStorage.getItem('user') || '{}');\n      } else {\n        localStorage.setItem('user', '{}');\n        JSON.parse(localStorage.getItem('user') || '{}');\n      }\n    });\n  } // Cadastra usuário pelo email/senha | Sign up with email/password\n\n\n  SignUp(userData) {\n    this.angFireAuth.createUserWithEmailAndPassword(userData.email, userData.password).then(result => {\n      var _a; // Atualizar o nome do usuário | update the user name\n\n\n      (_a = result.user) === null || _a === void 0 ? void 0 : _a.updateProfile({\n        displayName: userData.displayName\n      }).then(resultUser => {\n        var _a;\n\n        (_a = result.user) === null || _a === void 0 ? void 0 : _a.providerData.forEach(profile => {\n          console.log(\"Sign-in provider: \" + (profile === null || profile === void 0 ? void 0 : profile.providerId));\n          console.log(\"  Provider-specific UID: \" + (profile === null || profile === void 0 ? void 0 : profile.uid));\n          console.log(\"  Name: \" + (profile === null || profile === void 0 ? void 0 : profile.displayName));\n          console.log(\"  Email: \" + (profile === null || profile === void 0 ? void 0 : profile.email));\n          console.log(\"  Photo URL: \" + (profile === null || profile === void 0 ? void 0 : profile.photoURL));\n        }); // this.SetUserDataDB(userData, result.user)\n      });\n      this.alertService.showAlertSuccess(\"Cadastro feito com sucesso :)\");\n      return document.location.reload();\n    }).catch(error => {\n      this.alertService.showAlertDanger(\"Email ou senha inválidos\");\n      console.error(error);\n    });\n  } // Loga com email/senha |  Sign in with email/password\n\n\n  SignIn(email, password) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield _this.angFireAuth.signInWithEmailAndPassword(email, password);\n\n        _this.ngZone.run(() => {\n          _this.router.navigate(['dashboard']).then(() => {\n            window.location.reload();\n          });\n        });\n      } catch (error) {\n        _this.alertService.showAlertDanger(\"Dados não encontrados. Verifique seu email e senha ou crie uma conta\");\n\n        console.error(error);\n      }\n    })();\n  } // Retorna true quando o usuário esta logado com email | Returns true when user is looged\n\n\n  get isLoggedIn() {\n    const user = JSON.parse(localStorage.getItem('user') || '{}');\n    return user !== null && user.emailVerified === false ? true : false;\n  } // Manda email quando o usuário esquece a senha | Send email when user Forgot password\n\n\n  ForgotPassword(passwordResetEmail) {\n    return this.angFireAuth.sendPasswordResetEmail(passwordResetEmail).then(() => {\n      window.alert('O link para atualizar sua senha foi mandado para seu email, verifique sua caixa. ');\n    }).catch(error => {\n      console.error(error);\n    });\n  } // Sair da autenticação do usuário | Sign out\n\n\n  SignOut() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.angFireAuth.signOut();\n      localStorage.removeItem('user');\n\n      _this2.router.navigate(['landing-page']).then(() => {\n        document.location.reload();\n      });\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i4.AlertModalService));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/neve/Documentos/projetos/tcc/poket-web/src/app/authentication/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NgZone } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore, AngularFirestoreDocument } from '@angular/fire/firestore';\nimport { Router } from '@angular/router';\nimport * as firebase from 'firebase/app';\nimport { AlertModalService } from 'src/app/shared/services/alert-modal.service';\nimport { User } from '../model/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  userData: any;\n  user: any;\n\n  constructor(\n    public angFireStore: AngularFirestore,\n    public angFireAuth: AngularFireAuth,\n    public router: Router,\n    public ngZone: NgZone,\n    private alertService: AlertModalService\n  ) {\n      this.angFireAuth.authState.subscribe(user => {\n        if(user) {\n          this.userData = user;\n          localStorage.setItem('user', JSON.stringify(this.userData));\n          JSON.parse(localStorage.getItem('user') || '{}');\n        }else {\n          localStorage.setItem('user', '{}');\n          JSON.parse(localStorage.getItem('user') || '{}');\n        }\n      })\n   }\n\n\n// Cadastra usuário pelo email/senha | Sign up with email/password\nSignUp(userData: User) {\n  this.angFireAuth.createUserWithEmailAndPassword(userData.email, userData.password)\n  .then((result) => {\n    \n    // Atualizar o nome do usuário | update the user name\n    result.user?.updateProfile({\n      displayName: userData.displayName\n    }).then((resultUser) => {\n      result.user?.providerData.forEach((profile) => {\n        console.log(\"Sign-in provider: \" + profile?.providerId);\n        console.log(\"  Provider-specific UID: \" + profile?.uid);\n        console.log(\"  Name: \" + profile?.displayName);\n        console.log(\"  Email: \" + profile?.email);\n        console.log(\"  Photo URL: \" + profile?.photoURL);\n      });\n      // this.SetUserDataDB(userData, result.user)\n    })\n\n    this.alertService.showAlertSuccess(\"Cadastro feito com sucesso :)\");\n    return document.location.reload();\n    \n  }).catch((error) => {\n    this.alertService.showAlertDanger(\"Email ou senha inválidos\");\n    console.error(error)\n  })\n  \n}\n\n// Loga com email/senha |  Sign in with email/password\n  async SignIn(email: string, password: string) {\n  try {\n    const result = await this.angFireAuth.signInWithEmailAndPassword(email, password);\n    this.ngZone.run(() => {\n      this.router.navigate(['dashboard']).then(() => {\n        window.location.reload();\n      });\n    });\n  } catch (error) {\n    this.alertService.showAlertDanger(\"Dados não encontrados. Verifique seu email e senha ou crie uma conta\");\n    console.error(error);\n  }\n \n}\n\n// Retorna true quando o usuário esta logado com email | Returns true when user is looged\nget isLoggedIn(): boolean {\n  const user = JSON.parse(localStorage.getItem('user') || '{}')\n  return (user !== null && user.emailVerified === false) ? true : false;\n\n}\n\n// Manda email quando o usuário esquece a senha | Send email when user Forgot password\nForgotPassword(passwordResetEmail: string) {\n  return this.angFireAuth.sendPasswordResetEmail(passwordResetEmail)\n  .then(() => {\n    window.alert('O link para atualizar sua senha foi mandado para seu email, verifique sua caixa. ')\n  }).catch((error => {\n    \n    console.error(error)\n  })) \n}\n\n\n// Sair da autenticação do usuário | Sign out\n  async SignOut() {\n  await this.angFireAuth.signOut();\n  localStorage.removeItem('user');\n  this.router.navigate(['landing-page']).then(() => {\n    document.location.reload();\n  });\n}\n\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}