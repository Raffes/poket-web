(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@sweetalert2/ngx-sweetalert2', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.Sweetalert2 = global.Sweetalert2 || {}, global.Sweetalert2['ngx-sweetalert2'] = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
}(this, (function (exports, i0, rxjs, operators, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var swalProviderToken = new i0.InjectionToken('@sweetalert2/ngx-sweetalert2#swalProvider');
    var fireOnInitToken = new i0.InjectionToken('@sweetalert2/ngx-sweetalert2#fireOnInit');
    var dismissOnDestroyToken = new i0.InjectionToken('@sweetalert2/ngx-sweetalert2#dismissOnDestroy');

    var SweetAlert2LoaderService = /** @class */ (function () {
        // Using any because Angular metadata generator does not understand a pure TS type here
        function SweetAlert2LoaderService(swalProvider) {
            this.swalProvider = swalProvider;
        }
        Object.defineProperty(SweetAlert2LoaderService.prototype, "swal", {
            get: function () {
                if (!this.swalPromiseCache) {
                    this.preloadSweetAlertLibrary();
                }
                return this.swalPromiseCache;
            },
            enumerable: false,
            configurable: true
        });
        SweetAlert2LoaderService.prototype.preloadSweetAlertLibrary = function () {
            if (this.swalPromiseCache)
                return;
            var libPromise = isLoader(this.swalProvider)
                ? this.swalProvider()
                : Promise.resolve(this.swalProvider);
            this.swalPromiseCache = libPromise.then(function (value) { return isDefaultExport(value) ? value : value.default; });
            function isLoader(value) {
                return typeof value === 'function' && value.version === undefined;
            }
            function isDefaultExport(value) {
                return typeof value === 'function';
            }
        };
        return SweetAlert2LoaderService;
    }());
    SweetAlert2LoaderService.decorators = [
        { type: i0.Injectable }
    ];
    SweetAlert2LoaderService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [swalProviderToken,] }] }
    ]; };

    /**
     * <swal> component. See the README.md for usage.
     *
     * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.
     * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled
     * to SweetAlert2, but also is type-safe even if both libraries do not evolve in sync.
     *
     * (?) If you want to use an object that declares the SweetAlert2 options all at once rather than many @Inputs,
     *     take a look at [swalOptions], that lets you pass a full {@link SweetAlertOptions} object.
     *
     * (?) If you are reading the TypeScript source of this component, you may think that it's a lot of code.
     *     Be sure that a lot of this code is types and Angular boilerplate. Compiled and minified code is much smaller.
     *     If you are really concerned about performance and/or don't care about the API and its convenient integration
     *     with Angular (notably change detection and transclusion), you may totally use SweetAlert2 natively as well ;)
     *
     * /!\ Some SweetAlert options aren't @Inputs but @Outputs: `willOpen`, `didOpen`, `didRender`, `willClose`, `didClose`
     *     and `didDestroy`.
     *     However, `preConfirm`, `preDeny` and `inputValidator` are still @Inputs because they are not event handlers,
     *     there can't be multiple listeners on them, and we need the values they can/must return.
     */
    var SwalComponent = /** @class */ (function () {
        function SwalComponent(sweetAlert2Loader, moduleLevelFireOnInit, moduleLevelDismissOnDestroy) {
            this.sweetAlert2Loader = sweetAlert2Loader;
            this.moduleLevelFireOnInit = moduleLevelFireOnInit;
            this.moduleLevelDismissOnDestroy = moduleLevelDismissOnDestroy;
            /**
             * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.
             */
            this.willOpen = new i0.EventEmitter();
            /**
             * Modal lifecycle hook. Synchronously runs before the modal is shown on screen.
             */
            this.didOpen = new i0.EventEmitter();
            /**
             * Modal lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the modal is
             * repainted on the screen).
             * Typically, this will happen after `Swal.fire()` or `Swal.update()`.
             * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer {@link didRender} over
             * {@link willOpen}.
             */
            this.didRender = new i0.EventEmitter();
            /**
             * Modal lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup
             * being fired).
             */
            this.willClose = new i0.EventEmitter();
            /**
             * Modal lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to
             * another popup being fired).
             */
            this.didClose = new i0.EventEmitter();
            /**
             * Modal lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another
             * popup.
             * If you have cleanup operations that you need to reliably execute each time a modal is closed, prefer
             * {@link didDestroy} over {@link didClose}.
             */
            this.didDestroy = new i0.EventEmitter();
            /**
             * Emits when the user clicks "Confirm".
             * The event value ($event) can be either:
             *  - by default, just `true`,
             *  - when using {@link input}, the input value,
             *  - when using {@link preConfirm}, the return value of this function.
             *
             * Example:
             *     <swal (confirm)="handleConfirm($event)"></swal>
             *
             *     public handleConfirm(email: string): void {
             *         // ... save user email
             *     }
             */
            this.confirm = new i0.EventEmitter();
            /**
             * Emits when the user clicks "Deny".
             * This event bears no value.
             * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and
             * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.
             *
             * Example:
             *     <swal (deny)="handleDeny()"></swal>
             *
             *     public handleDeny(): void {
             *     }
             */
            this.deny = new i0.EventEmitter();
            /**
             * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
             * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when
             * the modal was programmatically closed (through {@link close} for example).
             *
             * Example:
             *     <swal (dismiss)="handleDismiss($event)"></swal>
             *
             *     public handleDismiss(reason: DismissReason | undefined): void {
             *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
             *         // ... do something
             *     }
             */
            this.dismiss = new i0.EventEmitter();
            /**
             * This Set retains the properties that have been changed from @Inputs, so we can know precisely
             * what options we have to send to {@link Swal.fire}.
             */
            this.touchedProps = new Set();
            /**
             * A function of signature `(propName: string): void` that adds a given property name to the list of
             * touched properties, ie. {@link touchedProps}.
             */
            this.markTouched = this.touchedProps.add.bind(this.touchedProps);
            /**
             * Is the SweetAlert2 modal represented by this component currently opened?
             */
            this.isCurrentlyShown = false;
        }
        Object.defineProperty(SwalComponent.prototype, "swalOptions", {
            /**
             * Computes the options object that will get passed to SweetAlert2.
             * Only the properties that have been set at least once on this component will be returned.
             * Mostly for internal usage.
             */
            get: function () {
                var _this = this;
                //=> We will compute the options object based on the option keys that are known to have changed.
                //   That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially
                //   avoiding side effects.
                return __spreadArray([], __read(this.touchedProps)).reduce(function (obj, key) {
                    var _a;
                    return (Object.assign(Object.assign({}, obj), (_a = {}, _a[key] = _this[key], _a)));
                }, {});
            },
            /**
             * An object of SweetAlert2 native options, useful if:
             *  - you don't want to use the @Inputs for practical/philosophical reasons ;
             *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.
             *
             * /!\ Please note that setting this property does NOT erase what has been set before unless you specify the
             *     previous properties you want to erase again.
             *     Ie. setting { title: 'Title' } and then { text: 'Text' } will give { title: 'Title', text: 'Text' }.
             *
             * /!\ Be aware that the options defined in this object will override the @Inputs of the same name.
             */
            set: function (options) {
                //=> Update properties
                Object.assign(this, options);
                //=> Mark changed properties as touched
                var touchedKeys = Object.keys(options);
                touchedKeys.forEach(this.markTouched);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SwalComponent.prototype, "swalVisible", {
            get: function () {
                return this.isCurrentlyShown;
            },
            set: function (visible) {
                visible ? this.fire() : this.close();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Angular lifecycle hook.
         * Asks the SweetAlert2 loader service to preload the SweetAlert2 library, so it begins to be loaded only if there
         * is a <swal> component somewhere, and is probably fully loaded when the modal has to be displayed,
         * causing no delay.
         */
        SwalComponent.prototype.ngOnInit = function () {
            //=> Preload SweetAlert2 library in case this component is activated.
            this.sweetAlert2Loader.preloadSweetAlertLibrary();
        };
        /**
         * Angular lifecycle hook.
         * Fires the modal, if the component or module is configured to do so.
         */
        SwalComponent.prototype.ngAfterViewInit = function () {
            var fireOnInit = this.swalFireOnInit === undefined
                ? this.moduleLevelFireOnInit
                : this.swalFireOnInit;
            fireOnInit && this.fire();
        };
        /**
         * Angular lifecycle hook.
         * Updates the SweetAlert options, and if the modal is opened, asks SweetAlert to render it again.
         */
        SwalComponent.prototype.ngOnChanges = function (changes) {
            //=> For each changed @Input that matches a SweetAlert2 option, mark as touched so we can
            //   send it with the next fire() or update() calls.
            Object.keys(changes)
                //=> If the filtering logic becomes more complex here, we can use Swal.isValidParameter
                .filter(function (key) { return !key.startsWith('swal'); })
                .forEach(this.markTouched);
            //=> Eventually trigger re-render if the modal is open.
            void this.update();
        };
        /**
         * Angular lifecycle hook.
         * Closes the SweetAlert when the component is destroyed.
         */
        SwalComponent.prototype.ngOnDestroy = function () {
            //=> Release the modal if the component is destroyed and if that behaviour is not disabled.
            var dismissOnDestroy = this.swalDismissOnDestroy === undefined
                ? this.moduleLevelDismissOnDestroy
                : this.swalDismissOnDestroy;
            dismissOnDestroy && this.close();
        };
        /**
         * Shows the SweetAlert.
         *
         * Returns the SweetAlert2 promise for convenience and use in code behind templates.
         * Otherwise, (confirm)="myHandler($event)" and (dismiss)="myHandler($event)" can be used in templates.
         */
        SwalComponent.prototype.fire = function () {
            return __awaiter(this, void 0, void 0, function () {
                function composeHook(userHook, libHook) {
                    return function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        return (libHook.apply(void 0, __spreadArray([], __read(args))), userHook === null || userHook === void 0 ? void 0 : userHook.apply(void 0, __spreadArray([], __read(args))));
                    };
                }
                var swal, userOptions, options, result;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.sweetAlert2Loader.swal];
                        case 1:
                            swal = _a.sent();
                            userOptions = this.swalOptions;
                            options = Object.assign(Object.assign({}, userOptions), {
                                //=> Handle modal lifecycle events
                                willOpen: composeHook(userOptions.willOpen, function (modalElement) {
                                    _this.willOpen.emit({ modalElement: modalElement });
                                }), didOpen: composeHook(userOptions.didOpen, function (modalElement) {
                                    _this.isCurrentlyShown = true;
                                    _this.didOpen.emit({ modalElement: modalElement });
                                }), didRender: composeHook(userOptions.didRender, function (modalElement) {
                                    _this.didRender.emit({ modalElement: modalElement });
                                }), willClose: composeHook(userOptions.willClose, function (modalElement) {
                                    _this.isCurrentlyShown = false;
                                    _this.willClose.emit({ modalElement: modalElement });
                                }), didClose: composeHook(userOptions.didClose, function () {
                                    _this.didClose.emit();
                                }), didDestroy: composeHook(userOptions.didDestroy, function () {
                                    _this.didDestroy.emit();
                                })
                            });
                            return [4 /*yield*/, swal.fire(options)];
                        case 2:
                            result = _a.sent();
                            //=> Emit on (confirm), (deny) or (dismiss)
                            switch (true) {
                                case result.isConfirmed:
                                    this.confirm.emit(result.value);
                                    break;
                                case result.isDenied:
                                    this.deny.emit();
                                    break;
                                case result.isDismissed:
                                    this.dismiss.emit(result.dismiss);
                                    break;
                            }
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        /**
         * Closes the modal, if opened.
         *
         * @param result The value that the modal will resolve with, triggering either (confirm), (deny) or (dismiss).
         *               If the argument is not passed, it is (dismiss) that will emit an `undefined` reason.
         *               {@see Swal.close}.
         */
        SwalComponent.prototype.close = function (result) {
            return __awaiter(this, void 0, void 0, function () {
                var swal;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.isCurrentlyShown)
                                return [2 /*return*/];
                            return [4 /*yield*/, this.sweetAlert2Loader.swal];
                        case 1:
                            swal = _a.sent();
                            swal.close(result);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Updates SweetAlert2 options while the modal is opened, causing the modal to re-render.
         * If the modal is not opened, the component options will simply be updated and that's it.
         *
         * /!\ Please note that not all SweetAlert2 options are updatable while the modal is opened.
         *
         * @param options
         */
        SwalComponent.prototype.update = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var swal, allOptions, updatableOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (options) {
                                this.swalOptions = options;
                            }
                            if (!this.isCurrentlyShown)
                                return [2 /*return*/];
                            return [4 /*yield*/, this.sweetAlert2Loader.swal];
                        case 1:
                            swal = _a.sent();
                            allOptions = this.swalOptions;
                            updatableOptions = Object.keys(allOptions)
                                .filter(swal.isUpdatableParameter)
                                .reduce(function (obj, key) {
                                var _a;
                                return (Object.assign(Object.assign({}, obj), (_a = {}, _a[key] = allOptions[key], _a)));
                            }, {});
                            swal.update(updatableOptions);
                            return [2 /*return*/];
                    }
                });
            });
        };
        return SwalComponent;
    }());
    SwalComponent.decorators = [
        { type: i0.Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'swal',
                    template: '',
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    SwalComponent.ctorParameters = function () { return [
        { type: SweetAlert2LoaderService },
        { type: Boolean, decorators: [{ type: i0.Inject, args: [fireOnInitToken,] }] },
        { type: Boolean, decorators: [{ type: i0.Inject, args: [dismissOnDestroyToken,] }] }
    ]; };
    SwalComponent.propDecorators = {
        title: [{ type: i0.Input }],
        titleText: [{ type: i0.Input }],
        text: [{ type: i0.Input }],
        html: [{ type: i0.Input }],
        footer: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        iconColor: [{ type: i0.Input }],
        iconHtml: [{ type: i0.Input }],
        backdrop: [{ type: i0.Input }],
        toast: [{ type: i0.Input }],
        target: [{ type: i0.Input }],
        input: [{ type: i0.Input }],
        width: [{ type: i0.Input }],
        padding: [{ type: i0.Input }],
        background: [{ type: i0.Input }],
        position: [{ type: i0.Input }],
        grow: [{ type: i0.Input }],
        showClass: [{ type: i0.Input }],
        hideClass: [{ type: i0.Input }],
        customClass: [{ type: i0.Input }],
        timer: [{ type: i0.Input }],
        timerProgressBar: [{ type: i0.Input }],
        heightAuto: [{ type: i0.Input }],
        allowOutsideClick: [{ type: i0.Input }],
        allowEscapeKey: [{ type: i0.Input }],
        allowEnterKey: [{ type: i0.Input }],
        stopKeydownPropagation: [{ type: i0.Input }],
        keydownListenerCapture: [{ type: i0.Input }],
        showConfirmButton: [{ type: i0.Input }],
        showDenyButton: [{ type: i0.Input }],
        showCancelButton: [{ type: i0.Input }],
        confirmButtonText: [{ type: i0.Input }],
        denyButtonText: [{ type: i0.Input }],
        cancelButtonText: [{ type: i0.Input }],
        confirmButtonColor: [{ type: i0.Input }],
        denyButtonColor: [{ type: i0.Input }],
        cancelButtonColor: [{ type: i0.Input }],
        confirmButtonAriaLabel: [{ type: i0.Input }],
        denyButtonAriaLabel: [{ type: i0.Input }],
        cancelButtonAriaLabel: [{ type: i0.Input }],
        buttonsStyling: [{ type: i0.Input }],
        reverseButtons: [{ type: i0.Input }],
        focusConfirm: [{ type: i0.Input }],
        focusDeny: [{ type: i0.Input }],
        focusCancel: [{ type: i0.Input }],
        showCloseButton: [{ type: i0.Input }],
        closeButtonHtml: [{ type: i0.Input }],
        closeButtonAriaLabel: [{ type: i0.Input }],
        loaderHtml: [{ type: i0.Input }],
        showLoaderOnConfirm: [{ type: i0.Input }],
        preConfirm: [{ type: i0.Input }],
        preDeny: [{ type: i0.Input }],
        imageUrl: [{ type: i0.Input }],
        imageWidth: [{ type: i0.Input }],
        imageHeight: [{ type: i0.Input }],
        imageAlt: [{ type: i0.Input }],
        inputLabel: [{ type: i0.Input }],
        inputPlaceholder: [{ type: i0.Input }],
        inputValue: [{ type: i0.Input }],
        inputOptions: [{ type: i0.Input }],
        inputAutoTrim: [{ type: i0.Input }],
        inputAttributes: [{ type: i0.Input }],
        inputValidator: [{ type: i0.Input }],
        returnInputValueOnDeny: [{ type: i0.Input }],
        validationMessage: [{ type: i0.Input }],
        progressSteps: [{ type: i0.Input }],
        currentProgressStep: [{ type: i0.Input }],
        progressStepsDistance: [{ type: i0.Input }],
        scrollbarPadding: [{ type: i0.Input }],
        swalOptions: [{ type: i0.Input }],
        swalFireOnInit: [{ type: i0.Input }],
        swalDismissOnDestroy: [{ type: i0.Input }],
        swalVisible: [{ type: i0.Input }],
        willOpen: [{ type: i0.Output }],
        didOpen: [{ type: i0.Output }],
        didRender: [{ type: i0.Output }],
        willClose: [{ type: i0.Output }],
        didClose: [{ type: i0.Output }],
        didDestroy: [{ type: i0.Output }],
        confirm: [{ type: i0.Output }],
        deny: [{ type: i0.Output }],
        dismiss: [{ type: i0.Output }]
    };

    /**
     * [swal] directive. It takes a value that defines the SweetAlert and can be of three types:
     *
     * 1) A simple array of two or three strings defining [title, text, icon] - the icon being optional, ex:
     *
     *    <button [swal]="['Title', 'Text']">Click me</button>
     *
     * 2) A native SweetAlert2 options object, ex:
     *
     *    <button [swal]="{ title: 'Title', text: 'Text' }">Click me</button>
     *
     * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:
     *
     *    <button [swal]="mySwal">Click me</button>
     *    <swal #mySwal title="Title" text="Text"></swal>
     */
    var SwalDirective = /** @class */ (function () {
        function SwalDirective(viewContainerRef, resolver) {
            this.viewContainerRef = viewContainerRef;
            this.resolver = resolver;
            /**
             * Emits when the user clicks "Confirm".
             * The event value ($event) can be either:
             *  - by default, just `true`,
             *  - when using {@link input}, the input value,
             *  - when using {@link preConfirm}, the return value of this function.
             *
             * Example:
             *     <swal (confirm)="handleConfirm($event)"></swal>
             *
             *     public handleConfirm(email: string): void {
             *         // ... save user email
             *     }
             */
            this.confirm = new i0.EventEmitter();
            /**
             * Emits when the user clicks "Deny".
             * This event bears no value.
             * Use `(deny)` (along with {@link showDenyButton}) when you want a modal with three buttons (confirm, deny and
             * cancel), and/or when you want to handle clear refusal in a separate way than simple dismissal.
             *
             * Example:
             *     <swal (deny)="handleDeny()"></swal>
             *
             *     public handleDeny(): void {
             *     }
             */
            this.deny = new i0.EventEmitter();
            /**
             * Emits when the user clicks "Cancel", or dismisses the modal by any other allowed way.
             * The event value ($event) is a string that explains how the modal was dismissed. It is `undefined` when
             * the modal was programmatically closed (through {@link dismiss} for example).
             *
             * Example:
             *     <swal (dismiss)="handleDismiss($event)"></swal>
             *
             *     public handleDismiss(reason: DismissReason | undefined): void {
             *         // reason can be 'cancel', 'overlay', 'close', 'timer' or undefined.
             *         // ... do something
             *     }
             */
            this.dismiss = new i0.EventEmitter();
        }
        Object.defineProperty(SwalDirective.prototype, "swal", {
            /**
             * SweetAlert2 options or a SwalComponent instance.
             * See the class doc block for more informations.
             */
            set: function (options) {
                var _a;
                if (options instanceof SwalComponent) {
                    this.swalInstance = options;
                }
                else if (isArrayOptions(options)) {
                    this.swalOptions = {};
                    _a = __read(options, 3), this.swalOptions.title = _a[0], this.swalOptions.text = _a[1], this.swalOptions.icon = _a[2];
                }
                else {
                    this.swalOptions = options;
                }
                function isArrayOptions(value) {
                    return Array.isArray(options);
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * OnInit lifecycle handler.
         * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm),
         * (deny) and (dismiss) outputs to reemit on the directive.
         */
        SwalDirective.prototype.ngOnInit = function () {
            if (!this.swalInstance) {
                var factory = this.resolver.resolveComponentFactory(SwalComponent);
                this.swalRef = this.viewContainerRef.createComponent(factory);
                this.swalInstance = this.swalRef.instance;
            }
        };
        /**
         * OnDestroy lifecycle handler.
         * Destroys the dynamically-created SwalComponent.
         */
        SwalDirective.prototype.ngOnDestroy = function () {
            if (this.swalRef) {
                this.swalRef.destroy();
            }
        };
        /**
         * Click handler.
         * The directive listens for onclick events on its host element.
         * When this happens, it shows the <swal> attached to this directive.
         */
        SwalDirective.prototype.onClick = function (event) {
            var _this = this;
            event.preventDefault();
            event.stopImmediatePropagation();
            event.stopPropagation();
            if (!this.swalInstance)
                return;
            if (this.swalOptions) {
                this.swalInstance.swalOptions = this.swalOptions;
            }
            var swalClosed = new rxjs.Subject();
            this.swalInstance.confirm.asObservable().pipe(operators.takeUntil(swalClosed)).subscribe(function (v) { return _this.confirm.emit(v); });
            this.swalInstance.deny.asObservable().pipe(operators.takeUntil(swalClosed)).subscribe(function (v) { return _this.deny.emit(v); });
            this.swalInstance.dismiss.asObservable().pipe(operators.takeUntil(swalClosed)).subscribe(function (v) { return _this.dismiss.emit(v); });
            this.swalInstance.fire().then(function () { return swalClosed.next(); });
        };
        return SwalDirective;
    }());
    SwalDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[swal]'
                },] }
    ];
    SwalDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.ComponentFactoryResolver }
    ]; };
    SwalDirective.propDecorators = {
        swal: [{ type: i0.Input }],
        confirm: [{ type: i0.Output }],
        deny: [{ type: i0.Output }],
        dismiss: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    /**
     * Represents an object of targets for <swal> portals (use with *swalPortal directive).
     * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
     * shown, so this object lets us reference those functions safely and in a statically-typed manner.
     */
    var SwalPortalTargets = /** @class */ (function () {
        function SwalPortalTargets() {
            /**
             * Targets the modal close button block contents.
             */
            this.closeButton = {
                element: function (swal) { return swal.getCloseButton(); },
                options: { showCloseButton: true }
            };
            /**
             * Targets the modal title block contents.
             */
            this.title = {
                element: function (swal) { return swal.getTitle(); },
                // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
                options: { title: ' ' }
            };
            /**
             * Targets the modal text block contents (that is another block inside the first content block, so you can still
             * use other modal features like Swal inputs, that are situated inside that parent content block).
             */
            this.content = {
                element: function (swal) { return swal.getHtmlContainer(); },
                // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
                options: { text: ' ' }
            };
            /**
             * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.
             * /!\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this
             *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.
             *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and
             *     performance of everyone, for a relatively rare use case.
             */
            this.actions = {
                element: function (swal) { return swal.getActions(); },
                // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.
                options: { showConfirmButton: true }
            };
            /**
             * Targets the confirm button contents, replacing the text inside it (not the button itself)
             */
            this.confirmButton = {
                element: function (swal) { return swal.getConfirmButton(); },
                options: { showConfirmButton: true }
            };
            /**
             * Targets the deny button contents, replacing the text inside it (not the button itself)
             */
            this.denyButton = {
                element: function (swal) { return swal.getDenyButton(); },
                options: { showDenyButton: true }
            };
            /**
             * Targets the cancel button contents, replacing the text inside it (not the button itself)
             */
            this.cancelButton = {
                element: function (swal) { return swal.getCancelButton(); },
                options: { showCancelButton: true }
            };
            /**
             * Targets the modal footer contents.
             */
            this.footer = {
                element: function (swal) { return swal.getFooter(); },
                // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
                options: { footer: ' ' }
            };
        }
        return SwalPortalTargets;
    }());
    SwalPortalTargets.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function SwalPortalTargets_Factory() { return new SwalPortalTargets(); }, token: SwalPortalTargets, providedIn: "root" });
    SwalPortalTargets.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    /**
     * @internal
     * Holds a consumer's Angular template and displays it on a Sweet Alert.
     * See SwalPortalDirective for info about the covered feature.
     */
    var SwalPortalComponent = /** @class */ (function () {
        function SwalPortalComponent() {
            this.template = null;
        }
        return SwalPortalComponent;
    }());
    SwalPortalComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'swal-portal',
                    template: '<ng-container *ngTemplateOutlet="template"></ng-container>',
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    SwalPortalComponent.propDecorators = {
        template: [{ type: i0.Input }]
    };

    /**
     * A structural directive that lets you use Angular templates inside of SweetAlerts.
     * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but
     * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.
     * The default target is the alert text content zone.
     *
     * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):
     *
     *     @Component({ ... })
     *     export class MyComponent {
     *         public constructor(public readonly swalTargets: SwalPortalTargets) {
     *         }
     *     }
     *
     * Usage in the template:
     *
     *     <swal title="Fill the form" (confirm)="confirmHandler()">
     *         <!-- This form will be displayed as the alert main content
     *              Targets the alert's main content zone by default -->
     *         <form *swalPortal [formControl]="myForm">
     *             ...
     *         </form>
     *
     *         <!-- This targets the confirm button's inner content
     *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
     *         <ng-container *swalPortal="swalTargets.confirmButton">
     *              Send ({{ secondsLeft }} seconds left)
     *         </ng-container>
     *     <swal>
     */
    var SwalPortalDirective = /** @class */ (function () {
        function SwalPortalDirective(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {
            this.resolver = resolver;
            this.injector = injector;
            this.app = app;
            this.templateRef = templateRef;
            this.sweetAlert2Loader = sweetAlert2Loader;
            this.swalTargets = swalTargets;
            this.swalComponent = swalComponent;
            this.destroyed = new rxjs.Subject();
        }
        /**
         * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
         * that will receive the consumer's template.
         */
        SwalPortalDirective.prototype.ngOnInit = function () {
            // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.
            this.target = this.target || this.swalTargets.content;
            //=> Apply the options provided by the target definition
            void this.swalComponent.update(this.target.options);
            //=> Subscribe to a few hooks frm the parent SwalComponent.
            this.swalComponent.didRender.pipe(operators.takeUntil(this.destroyed)).subscribe(this.didRenderHook.bind(this));
            this.swalComponent.willOpen.pipe(operators.takeUntil(this.destroyed)).subscribe(this.willOpenHook.bind(this));
            this.swalComponent.didDestroy.pipe(operators.takeUntil(this.destroyed)).subscribe(this.didDestroyHook.bind(this));
        };
        /**
         * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the
         * parent SwalComponent events.
         */
        SwalPortalDirective.prototype.ngOnDestroy = function () {
            this.destroyed.next();
        };
        /**
         * This didRender hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
         * {@link willOpenHook}), or after Swal.update() is called.
         * This is a good place to render, or re-render, our portal contents.
         */
        SwalPortalDirective.prototype.didRenderHook = function () {
            return __awaiter(this, void 0, void 0, function () {
                var swal, targetEl;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            //=> Ensure the portal component is created
                            if (!this.portalComponentRef) {
                                this.portalComponentRef = this.createPortalComponent();
                            }
                            return [4 /*yield*/, this.sweetAlert2Loader.swal];
                        case 1:
                            swal = _a.sent();
                            targetEl = this.target.element(swal);
                            if (!targetEl)
                                return [2 /*return*/];
                            //=> Replace target's contents with our component
                            // https://jsperf.com/innerhtml-vs-removechild/15
                            while (targetEl.firstChild) {
                                targetEl.removeChild(targetEl.firstChild);
                            }
                            targetEl.appendChild(this.portalComponentRef.location.nativeElement);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * This willOpen hook runs once (per modal instance), just before the modal is shown on the screen.
         * This is a good place to declare our detached view to the Angular app.
         */
        SwalPortalDirective.prototype.willOpenHook = function () {
            if (!this.portalComponentRef)
                return;
            //=> Make the Angular app aware of that detached view so rendering and change detection can happen
            this.app.attachView(this.portalComponentRef.hostView);
        };
        /**
         * This didDestroy hook runs once (per modal instance), just after the modal closing animation terminated.
         * This is a good place to detach and destroy our content, that is not visible anymore.
         */
        SwalPortalDirective.prototype.didDestroyHook = function () {
            if (!this.portalComponentRef)
                return;
            //=> Detach the portal component from the app and destroy it
            this.app.detachView(this.portalComponentRef.hostView);
            this.portalComponentRef.destroy();
            this.portalComponentRef = void 0;
        };
        /**
         * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.
         */
        SwalPortalDirective.prototype.createPortalComponent = function () {
            //=> Create the SwalPortalComponent that will hold our content
            var factory = this.resolver.resolveComponentFactory(SwalPortalComponent);
            // Yes, we do not use the third argument that would directly use the target as the component's view
            // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)
            // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be
            // able to restore it at any moment, ie. after the modal has been re-rendered.
            var componentRef = factory.create(this.injector, []);
            //=> Apply the consumer's template on the component
            componentRef.instance.template = this.templateRef;
            return componentRef;
        };
        return SwalPortalDirective;
    }());
    SwalPortalDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[swalPortal]'
                },] }
    ];
    SwalPortalDirective.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver },
        { type: i0.Injector },
        { type: i0.ApplicationRef },
        { type: i0.TemplateRef },
        { type: SweetAlert2LoaderService },
        { type: SwalPortalTargets },
        { type: SwalComponent, decorators: [{ type: i0.Host }] }
    ]; };
    SwalPortalDirective.propDecorators = {
        target: [{ type: i0.Input, args: ['swalPortal',] }]
    };

    function provideDefaultSwal() {
        return import('sweetalert2');
    }
    var SweetAlert2Module = /** @class */ (function () {
        function SweetAlert2Module() {
        }
        SweetAlert2Module.forRoot = function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: SweetAlert2Module,
                providers: [
                    SweetAlert2LoaderService,
                    { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },
                    { provide: fireOnInitToken, useValue: options.fireOnInit || false },
                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }
                ]
            };
        };
        SweetAlert2Module.forChild = function (options) {
            if (options === void 0) { options = {}; }
            return {
                ngModule: SweetAlert2Module,
                providers: __spreadArray(__spreadArray(__spreadArray([], __read(options.provideSwal ? [
                    SweetAlert2LoaderService,
                    { provide: swalProviderToken, useValue: options.provideSwal }
                ] : [])), __read(options.fireOnInit !== undefined ? [
                    { provide: fireOnInitToken, useValue: options.fireOnInit }
                ] : [])), __read(options.dismissOnDestroy !== undefined ? [
                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }
                ] : []))
            };
        };
        return SweetAlert2Module;
    }());
    SweetAlert2Module.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [
                        SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    exports: [
                        SwalComponent, SwalPortalDirective, SwalDirective
                    ],
                    entryComponents: [
                        SwalComponent, SwalPortalComponent
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.SwalComponent = SwalComponent;
    exports.SwalDirective = SwalDirective;
    exports.SwalPortalDirective = SwalPortalDirective;
    exports.SwalPortalTargets = SwalPortalTargets;
    exports.SweetAlert2LoaderService = SweetAlert2LoaderService;
    exports.SweetAlert2Module = SweetAlert2Module;
    exports.ɵa = provideDefaultSwal;
    exports.ɵb = swalProviderToken;
    exports.ɵc = fireOnInitToken;
    exports.ɵd = dismissOnDestroyToken;
    exports.ɵe = SwalPortalComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=sweetalert2-ngx-sweetalert2.umd.js.map
