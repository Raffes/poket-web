import { Inject, Injectable } from '@angular/core';
import { swalProviderToken } from './di';
export class SweetAlert2LoaderService {
    // Using any because Angular metadata generator does not understand a pure TS type here
    constructor(swalProvider) {
        this.swalProvider = swalProvider;
    }
    get swal() {
        if (!this.swalPromiseCache) {
            this.preloadSweetAlertLibrary();
        }
        return this.swalPromiseCache;
    }
    preloadSweetAlertLibrary() {
        if (this.swalPromiseCache)
            return;
        const libPromise = isLoader(this.swalProvider)
            ? this.swalProvider()
            : Promise.resolve(this.swalProvider);
        this.swalPromiseCache = libPromise.then(value => isDefaultExport(value) ? value : value.default);
        function isLoader(value) {
            return typeof value === 'function' && value.version === undefined;
        }
        function isDefaultExport(value) {
            return typeof value === 'function';
        }
    }
}
SweetAlert2LoaderService.decorators = [
    { type: Injectable }
];
SweetAlert2LoaderService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [swalProviderToken,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dlZXRhbGVydDItbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3dlZXRhbGVydDIvc3JjL2xpYi9zd2VldGFsZXJ0Mi1sb2FkZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFTekMsTUFBTSxPQUFPLHdCQUF3QjtJQUtqQyx1RkFBdUY7SUFDdkYsWUFBOEMsWUFBaUI7UUFDM0QsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7SUFDckMsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEIsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7U0FDbkM7UUFFRCxPQUFPLElBQUksQ0FBQyxnQkFBaUIsQ0FBQztJQUNsQyxDQUFDO0lBRU0sd0JBQXdCO1FBQzNCLElBQUksSUFBSSxDQUFDLGdCQUFnQjtZQUFFLE9BQU87UUFFbEMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDMUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqRyxTQUFTLFFBQVEsQ0FBQyxLQUFtQjtZQUNqQyxPQUFPLE9BQU8sS0FBSyxLQUFLLFVBQVUsSUFBSyxLQUFhLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQztRQUMvRSxDQUFDO1FBRUQsU0FBUyxlQUFlLENBQUMsS0FBaUI7WUFDdEMsT0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUM7UUFDdkMsQ0FBQztJQUNMLENBQUM7OztZQW5DSixVQUFVOzs7NENBT2EsTUFBTSxTQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IFN3YWxEZWZhdWx0LCAqIGFzIFN3YWwgZnJvbSAnc3dlZXRhbGVydDInO1xuaW1wb3J0IHsgc3dhbFByb3ZpZGVyVG9rZW4gfSBmcm9tICcuL2RpJztcblxuZXhwb3J0IHR5cGUgU3dhbE1vZHVsZSA9IHR5cGVvZiBTd2FsRGVmYXVsdCB8IHR5cGVvZiBTd2FsO1xuXG5leHBvcnQgdHlwZSBTd2FsUHJvdmlkZXIgPSBTd2FsTW9kdWxlTG9hZGVyIHwgU3dhbE1vZHVsZTtcblxuZXhwb3J0IHR5cGUgU3dhbE1vZHVsZUxvYWRlciA9ICgpID0+IFByb21pc2U8U3dhbE1vZHVsZT47XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTd2VldEFsZXJ0MkxvYWRlclNlcnZpY2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3dhbFByb3ZpZGVyOiBTd2FsUHJvdmlkZXI7XG5cbiAgICBwcml2YXRlIHN3YWxQcm9taXNlQ2FjaGU/OiBQcm9taXNlPHR5cGVvZiBTd2FsRGVmYXVsdD47XG5cbiAgICAvLyBVc2luZyBhbnkgYmVjYXVzZSBBbmd1bGFyIG1ldGFkYXRhIGdlbmVyYXRvciBkb2VzIG5vdCB1bmRlcnN0YW5kIGEgcHVyZSBUUyB0eXBlIGhlcmVcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoQEluamVjdChzd2FsUHJvdmlkZXJUb2tlbikgc3dhbFByb3ZpZGVyOiBhbnkpIHtcbiAgICAgICAgdGhpcy5zd2FsUHJvdmlkZXIgPSBzd2FsUHJvdmlkZXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzd2FsKCk6IFByb21pc2U8dHlwZW9mIFN3YWxEZWZhdWx0PiB7XG4gICAgICAgIGlmICghdGhpcy5zd2FsUHJvbWlzZUNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLnByZWxvYWRTd2VldEFsZXJ0TGlicmFyeSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3dhbFByb21pc2VDYWNoZSE7XG4gICAgfVxuXG4gICAgcHVibGljIHByZWxvYWRTd2VldEFsZXJ0TGlicmFyeSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc3dhbFByb21pc2VDYWNoZSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGxpYlByb21pc2UgPSBpc0xvYWRlcih0aGlzLnN3YWxQcm92aWRlcilcbiAgICAgICAgICAgID8gdGhpcy5zd2FsUHJvdmlkZXIoKVxuICAgICAgICAgICAgOiBQcm9taXNlLnJlc29sdmUodGhpcy5zd2FsUHJvdmlkZXIpO1xuXG4gICAgICAgIHRoaXMuc3dhbFByb21pc2VDYWNoZSA9IGxpYlByb21pc2UudGhlbih2YWx1ZSA9PiBpc0RlZmF1bHRFeHBvcnQodmFsdWUpID8gdmFsdWUgOiB2YWx1ZS5kZWZhdWx0KTtcblxuICAgICAgICBmdW5jdGlvbiBpc0xvYWRlcih2YWx1ZTogU3dhbFByb3ZpZGVyKTogdmFsdWUgaXMgU3dhbE1vZHVsZUxvYWRlciB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmICh2YWx1ZSBhcyBhbnkpLnZlcnNpb24gPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzRGVmYXVsdEV4cG9ydCh2YWx1ZTogU3dhbE1vZHVsZSk6IHZhbHVlIGlzIHR5cGVvZiBTd2FsRGVmYXVsdCB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19